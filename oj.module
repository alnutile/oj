<?php

/**
 * @file 
 * Quick feed needed for YOURMOD module
 */
 
/**
 * After an order is marked complete
 * This function will check the orders products
 * to see if any of them have a "Number" value to 
 * trigger nodes to be created.
 * This was placed in Rules via the install of this module
 */
function og_add_nodes_for_user($order){
  foreach($order->products as $key){
    //Use the product id to see if this
    //Product has a related entry in the db for 
    //Counts and Types
    $exists = db_query("SELECT count, type, title FROM {oj_count_and_type} WHERE nid = :id", array(':id' => $key->nid))->fetchAll();
    if(count($exists)){
     og_make_nodes($exists[0]->type, $exists[0]->count, $exists[0]->title, $order); 
    }
  }
} 


/**
 * Make nodes of certain type
 * @param the type of node
 * @param howmany
 * @param order object to get user
 */
function og_make_nodes($type, $howmany, $title, $order) {
  $account = user_load($order->uid);
  if($howmany > 0) {
    $start = 1;
    for($start; $start <= $howmany; $start++){
        $node = new stdClass();
        $node->language = 'und';
        $node->type = $type;
      	node_object_prepare($node);
      	$node->uid = $account->uid;
      	$node->name = $account->name;
      	$node->title = "$title $start";
      	$node->status = 0;
      	$node->promote = 0;
      	$node->revision = $account->uid;
      	$node->changed = $_SERVER['REQUEST_TIME'];
      	$node->created = $_SERVER['REQUEST_TIME'];
      	node_submit($node);
      	node_save($node);	      	
    }
  }
}

/**
 * Place the users nodes list on their USER page
 */
function oj_user_nodes($account){
  $header = array(
    array('data' => t('Title')),
    array('data' => t('View')),
    array('data' => t('Status')),
  );
  
  $query = db_select('node', 'n')->extend('PagerDefault');
  $query->fields('n', array('nid', 'title', 'status'));
  $query->condition('n.uid', $account->uid, '=');
  $result = $query
    ->limit(20) 
    ->orderBy('n.title')
    ->execute();
  $rows = array();

  foreach($result as $row){
    $link = l($row->title, 'node/' . $row->nid);
    $view = l('view', 'node/' . $row->nid);
    $status = ($row->status == 0) ? 'UnPublished' : 'Published';
    $rows[] = array('data' => array($link, $view, $status));
  }
  
  $build['pager_table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#empty' => t('There are no date formats found in the db'),
  );  

  $build['pager_pager'] = array('#theme' => 'pager');

  return $build;
}



/**
 * Implements hook_user_view().
 */
function oj_user_view($account, $view_mode) {
  global $user;
    $pages = render(oj_user_nodes($account));
    $account->content['summary']['membernodes'] = array(
      '#type' => 'user_profile_item',
      '#title' => t('Member Pages'),
      '#markup' => $pages,
    );
}

/**
 * Set the node types list to 
 * allow the user to choose
 * which one to create
 */
function oj_form_alter(&$form, $form_state, $form_id) {
  if($form['#form_id'] == 'product_node_form') {
    //Add the count field 
    $node = $form['#node'];
    $options = array(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20);
    $form['oj_count'] = array(
      '#type' => 'select',
      '#options' => drupal_map_assoc($options),
      '#default_value' => isset($node->oj_count) ? $node->oj_count : '',
      '#title' => t('How many nodes to make'),
    );
    //Add the type field
    $options = node_type_get_names();
    unset($options['product']);
    $form['oj_type'] = array(
      '#type' => 'select',
      '#title' => t('Node type to make'),
      '#options' => $options,
      '#empty_value' => '99999',
      '#empty_option' => '--select--',
      '#default_value' => isset($node->oj_type) ? $node->oj_type : '',
    );    
    $form['oj_title'] = array(
      '#type' => 'textfield',
      '#title' => t('Default Title for the new nodes'),
      '#default_value' => isset($node->oj_title) ? $node->oj_title : '',
    );   

  }
}

function oj_node_load($nodes, $types) {
  // We can use $types to figure out if we need to process any of these nodes.
  $types = array('product');

  // Now we need to make a list of revisions based on $our_types
  foreach ($nodes as $node) {
    // We are using the revision id instead of node id.
      $vids[] = $node->vid;
  }
  
  // Check if we should load count for any of the nodes.
  if (!isset($vids) || !count($vids)) {
    return;
  }

  // When we read, we don't care about the node->nid; we look for the right
  // revision ID (node->vid).
  $result = db_select('oj_count_and_type', 'oj')
  ->fields('oj', array('nid', 'vid', 'count', 'type', 'title'))
  ->where('oj.vid IN (:vids)', array(':vids' => $vids))
  ->execute();

  foreach ($result as $record) {
    $nodes[$record->nid]->oj_count = $record->count;
    $nodes[$record->nid]->oj_type = $record->type;
    $nodes[$record->nid]->oj_title = $record->title;
  }
}

/**
 * Implements hook_node_insert().
 *
 * As a new node is being inserted into the database, we need to do our own
 * database inserts.
 */
function oj_node_insert($node) {
  if ($node->type == 'product') {
    // Notice that we are ignoring any revision information using $node->nid
    db_insert('oj_count_and_type')
    ->fields(array(
        'nid' => $node->nid,
        'vid' => $node->vid,
        'count' => $node->oj_count,
        'type' => $node->oj_type,
        'title' => $node->oj_title,
    ))
    ->execute();
  }
}

/**
 * Implements hook_node_delete().
 *
 * When a node is deleted, we need to remove all related records from our table,
 * including all revisions. For the delete operations we use node->nid.
 */
function oj_node_delete($node) {
  // Notice that we're deleting even if the content type has no rating enabled.
  db_delete('oj_count_and_type')
    ->condition('nid', $node->nid)
    ->execute();
}


function oj_node_update($node) {
  if ($node->type == 'product') {
    // Check first if this node has a saved rating.
    $count = db_select('oj_count_and_type', 'o')
      ->fields('o', array(
        'count',
      ))
      ->where('o.vid = (:vid)', array(':vid' => $node->vid))
      ->execute()->fetchField();

    if ($count) {
      // Node has been rated before.
      db_update('oj_count_and_type')
        ->fields(array('count' => $node->oj_count, 'type' => $node->oj_type, 'title' => $node->oj_title))
        ->condition('vid', $node->vid)
        ->execute();
    }
    else {
      // Node was not previously rated, so insert a new rating in database.
      oj_node_insert($node);
    }
  }
}